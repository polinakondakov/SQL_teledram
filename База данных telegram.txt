-- DDL # CREATE - создать таблицу, базу данных, и тп (какой-то объект), 
#ALTER - обновить какой-то объект, 
#DROP - удалить какой то объект

DROP DATABASE IF EXISTS telegram; #сначала проверим нет ли уже такой таблицы, нам потом будет удобно так запускать весь код
CREATE SCHEMA telegram; # тоже самое что и create database. Создаем базу данных телеграмм. 
USE telegram; # переключаемся на нее, чтоб дальше все действия происходили с ней

DROP TABLE IF EXISTS users; 
CREATE TABLE users ( #создаем таблицу пользователей
    id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY, # уникальный номер пользователя, 
    #который еще и первичный ключ, то есть не повторяется 
    # id SERIAL - BIGINT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE
    firstname VARCHAR(100), # имя VARCHAR - длина переменная но до 100 символов
    lastname VARCHAR(100) COMMENT 'фамилия', #такие комментарии хранятся в самой базе данных
    login VARCHAR(100),
    email VARCHAR(100) UNIQUE, # почта тоже не должна потовряться ни у кого
    # channel_id BIGINT UNSIGNED NOT NULL,
    # birthday DATETIME,
    password_hash VARCHAR(256),
    phone BIGINT UNSIGNED UNIQUE, # +7 (900) 123-45-67 => 79 001 234 567

    INDEX idx_users_username(firstname, lastname) # так можно добавить индекс
) COMMENT 'пользователи';


# 1 x 1 связь между таблицами - одному пользователю из таблицы пользователь соответсвуюет 
# одни настройки пользователя
DROP TABLE IF EXISTS user_settings;
CREATE TABLE user_settings(
    user_id BIGINT UNSIGNED NOT NULL, # свзяь между таблицей пользователи
    is_premium_account BIT, #логический тип 
    is_night_mode_enabled BIT,
    color_scheme ENUM('classic', 'day', 'tinted', 'night'), # тип данных - перечисление, поле может принимать только такие значения
    # удобно если ничего больше не будет добавлено хранить такую штуку в ENUM
    LANGUAGE ENUM('english', 'french', 'russian', 'german', 'belorussian', 'croatian', 'dutch'),
    status_text VARCHAR(70),
    notifications_and_sounds JSON, # специальный тип данных, где каждому данному соотвествует ключ - значение 
    created_at DATETIME DEFAULT NOW() # по умолчанию дата принимается дата в настоящий момент времени
);

ALTER TABLE user_settings ADD CONSTRAINT fk_user_settings_user_id # создание внешнего ключа
FOREIGN KEY (user_id) REFERENCES users(id)
ON UPDATE cascade # что происходит при обновлении данных в головной таблице
ON DELETE RESTRICT; # что происходит при удалении данных в головной таблице

# [ CASCADE | RESTRICT | SET NULL | SET DEFAULT ]

# допустим нам нельзя уже пересоздавать таблицу, потому что там храняться данные,
# тогда для внесения измененй в структуру таблицы мы должны воспользоваться обновлением таблицы

ALTER TABLE users ADD COLUMN birthday DATETIME; # добавим колонку день рождения
ALTER TABLE users MODIFY COLUMN birthday DATE; # изменим тип данных с дата время на просто дату
# ALTER TABLE users RENAME COLUMN birthday TO date_of_birth; # переименовать
# ALTER TABLE users DROP COLUMN date_of_birth; # удалить колонку

ALTER TABLE user_settings ADD PRIMARY KEY (user_id);

/*DROP TABLE IF EXISTS media_types;  можно создать таблицу в которой буду храниться типы данных
 * которые можно отправлять
CREATE TABLE media_types(
    id SERIAL,
    name VARCHAR(50)
);*/

# 1 x M  создадим таблицу связь которой с оносвной будет 1 ко многим, 1 пользователь может 
# отправить и получить много сообщений
DROP TABLE IF EXISTS `private_messages`;
CREATE TABLE `private_messages`(
    `id` SERIAL,  # id SERIAL PRIMARY KEY - плохо т.к. двойной индекс,  
    `sender_id` BIGINT UNSIGNED NOT NULL, # внешний ключ - id отправителя
    `receiver_id` BIGINT UNSIGNED NOT NULL, # внешний ключ - id получателя
    `media_type` ENUM('text', 'image', 'audio', 'video'), # так же типы данных монжо перечислить
    # но тогда сложнее будет их пополнять
    `reply_to_id` BIGINT UNSIGNED NULL, # пересланное сообщение, мб пустым и часто будет пустым
    # media_type_id BIGINT UNSIGNED NOT NULL # это если мы создаем для типов отправляеммых
    # данных свою таблицу, то нужно не нее сосолаться
    # body VARCHAR(), # limit 65535
    `body` TEXT, # для хранения текста сообщения 
    # file BLOB # BLOB - тип данных для побайтового хранения картинок аудио и тп
    `filename` VARCHAR(200), # будем хранить просто название отправляемого/получаемого файла
    `created_at` DATETIME DEFAULT NOW(), # дата и время отправки сообщения

    #PRIMARY KEY (id), # добавим сюда внешний ключ для id
    FOREIGN KEY (sender_id) REFERENCES users(id), # внешний ключ
    FOREIGN KEY (receiver_id) REFERENCES users(id), # внешний ключ
    FOREIGN KEY (reply_to_id) REFERENCES private_messages(id) #это будет ссылаться на предыдушее 
    #сообщение из этой же таблицы
);

DROP TABLE IF EXISTS `groups`; # создаем таблицу группа
CREATE TABLE `groups` (
    id SERIAL, 
    title VARCHAR(45), # название группы
    icon VARCHAR(45), # ссылка на иконку групп, а сами изображения пусть на другом сервере
    invite_link VARCHAR(100), # ссылка для приглашения
    settings JSON, # настройки группы
    owner_user_id BIGINT UNSIGNED NOT NULL, # создатель группы
    is_private BIT, # приватна ли группа
    created_at DATETIME DEFAULT NOW(), 

    FOREIGN KEY (owner_user_id) REFERENCES users (id) # создатель группы из всех пользователей
);

DROP TABLE IF EXISTS `group_members`; # подписчики группы
CREATE TABLE `group_members` (
    `id` SERIAL,
    `group_id` BIGINT UNSIGNED NOT NULL,#id группы
    `user_id` BIGINT UNSIGNED NOT NULL, #id подписчика
    `created_at` DATETIME DEFAULT NOW(),

    FOREIGN KEY (user_id) REFERENCES users (id),
    FOREIGN KEY (group_id) REFERENCES `groups` (id)
);

DROP TABLE IF EXISTS `group_messages`; # сообщения группы
CREATE TABLE `group_messages` (
    id SERIAL,
    group_id BIGINT UNSIGNED NOT NULL,
    sender_id BIGINT UNSIGNED NOT NULL,
    reply_to_id BIGINT UNSIGNED NULL,
    media_type ENUM('text', 'image', 'audio', 'video'),
    body TEXT, # сам текст сообщения
    filename VARCHAR(100) NULL, # имя файла/ссылка на файл, может быть пустым, вообще это по умолчанию просто мы показали так
    created_at DATETIME DEFAULT NOW(),

    FOREIGN KEY (sender_id) REFERENCES users (id),
    FOREIGN KEY (group_id) REFERENCES `groups` (id),
    FOREIGN KEY (reply_to_id) REFERENCES group_messages (id)
);

DROP TABLE IF EXISTS channels;
CREATE TABLE channels ( # таблица с каналами
    id SERIAL,
    title VARCHAR(45), # название
    icon VARCHAR(45), # имя файла икноки или ссылка
    invite_link VARCHAR(100), # ссылка для приглашения
    settings JSON, # настройки
    owner_user_id BIGINT UNSIGNED NOT NULL, # владелец
#    subscriber_user_id BIGINT UNSIGNED NOT NULL, # так мы не делаем, тогда получится, что у одного канала один подписчик
    is_private BIT,
#    channel_type ENUM('public', 'private') # лучше логический тип как выше
    created_at DATETIME DEFAULT NOW(),
    
    FOREIGN KEY (owner_user_id) REFERENCES users (id)    
);

# M x M  Чтоб связать таблицу каналов и подписчиков это связь МНОГО КО МНОГИМ так как у канала может быть много подписчиков
# и у юзера может быть много подписок на каналы
DROP TABLE IF EXISTS channel_subscribers;
CREATE TABLE channel_subscribers ( # вспомогательная таблица для связи МНОГО КО МНОГИМ 
    channel_id BIGINT UNSIGNED NOT NULL, # ид канала
    user_id BIGINT UNSIGNED NOT NULL, # ид подписчика
    status ENUM('requested', 'joined', 'left'), #статус подписчика в канале: заявка подана, подписан, отписан
    created_at DATETIME DEFAULT NOW(), # когда была создана запись
    updated_at DATETIME ON UPDATE CURRENT_TIMESTAMP, # при обновлении данных в строке тут будет появлятся время обновления

    PRIMARY KEY (user_id, channel_id), # первичный ключ составной, так как таблица вспомогательна и гарантирует уникальную пару
    # подпичик - канал, то есть такая запись в этой таблице уникальна
    FOREIGN KEY (user_id) REFERENCES users (id),
    FOREIGN KEY (channel_id) REFERENCES channels (id)
);

DROP TABLE IF EXISTS channel_messages; #сообщения в канале
CREATE TABLE channel_messages (
    id SERIAL,
    channel_id BIGINT UNSIGNED NOT NULL, # идентификатор канала
    sender_id BIGINT UNSIGNED NOT NULL, # кто оставил сообщение
    media_type ENUM('text', 'image', 'audio', 'video'), # прикрепленные штуки
    body text, # тело сообщения
    filename VARCHAR(100) NULL, # ссылка на прикрепленные фото видео и тп
    created_at DATETIME DEFAULT NOW(), # когда было сообщение
    
    FOREIGN KEY (sender_id) REFERENCES users (id), # отправитель ссылается на всех юзеров
    FOREIGN KEY (channel_id) REFERENCES `channels` (id) # канал в котором оставили из таблицы всех каналов
);

DROP TABLE IF EXISTS saved_messages; # избранные сообщения
CREATE TABLE saved_messages (
    id SERIAL,
    user_id BIGINT UNSIGNED NOT NULL, # кто оставил
    body TEXT,
    created_at DATETIME DEFAULT NOW(),
    
    FOREIGN KEY (user_id) REFERENCES users (id)
);

DROP TABLE IF EXISTS reactions_list; # таблица - справочник реакций в телеграмм
CREATE TABLE reactions_list (
    id SERIAL, 
    code VARCHAR(1)# код реакции 
)DEFAULT CHARSET=utf8mb4 COLLATE utf8mb4_unicode_ci; # чарсет для реакций

DROP TABLE IF EXISTS private_message_reactions; # храним реакции в приватных диалогах
CREATE TABLE private_message_reactions (
    reaction_id BIGINT UNSIGNED NOT NULL, # ссылка на реакцию
    message_id BIGINT UNSIGNED NOT NULL, # ссылка на сообщение 
    user_id BIGINT UNSIGNED NOT NULL, # ссылка на юзера кто оставил
    created_at DATETIME DEFAULT NOW(), # когда оставил
    
    FOREIGN KEY (reaction_id) REFERENCES reactions_list (id),
    FOREIGN KEY (message_id) REFERENCES private_messages (id),
    FOREIGN KEY (user_id) REFERENCES users (id)
);

DROP TABLE IF EXISTS channel_message_reactions; # реакции на сообщениях в группах
CREATE TABLE channel_message_reactions (
    reaction_id BIGINT UNSIGNED NOT NULL, # ссылка на рекацию...
    message_id BIGINT UNSIGNED NOT NULL,
    user_id BIGINT UNSIGNED NOT NULL,
    created_at DATETIME DEFAULT NOW(),
    
    FOREIGN KEY (reaction_id) REFERENCES reactions_list (id),
    FOREIGN KEY (message_id) REFERENCES channel_messages (id),
    FOREIGN KEY (user_id) REFERENCES users (id)
);

DROP TABLE IF EXISTS group_message_reactions;
CREATE TABLE group_message_reactions (
    reaction_id BIGINT UNSIGNED NOT NULL,
    message_id BIGINT UNSIGNED NOT NULL,
    user_id BIGINT UNSIGNED NOT NULL,
    created_at DATETIME DEFAULT NOW(),
    
    FOREIGN KEY (reaction_id) REFERENCES reactions_list (id),
    FOREIGN KEY (message_id) REFERENCES group_messages (id),
    FOREIGN KEY (user_id) REFERENCES users (id)
);

DROP TABLE IF EXISTS stories; # истории в телеграмм
CREATE TABLE stories (
    id SERIAL,
    user_id BIGINT UNSIGNED NOT NULL, # кто создал
    caption VARCHAR(140), # надпись
    # file BLOB, # тут могла бы храниться сама картинка и видео, 
    #но мы в базе храним только ссылку на это, а сам файл на другом сервере
    filename VARCHAR(100), # ссылка на картинку или видео
    views_count INT UNSIGNED, # количество просмотров до 4 млрд
    created_at DATETIME DEFAULT NOW(), # когда создали

    FOREIGN KEY (user_id) REFERENCES users (id) # ссылаемся на юзера создавшего сторис из таблицы всех юзеров
);

# на одну сториз много реакций связь 1 ко многим
DROP TABLE IF EXISTS stories_likes; # реакции на строиз храним отдельно так как на одну строиз может быть много реакций
CREATE TABLE stories_likes (
    id SERIAL, 
    story_id BIGINT UNSIGNED NOT NULL, # ссылка на историю
    user_id BIGINT UNSIGNED NOT NULL, # ссылка кто поставил реакцию
    created_at DATETIME DEFAULT NOW(), # когда поставили реакцию
    
    FOREIGN KEY (user_id) REFERENCES users (id),
    FOREIGN KEY (story_id) REFERENCES stories (id)
);